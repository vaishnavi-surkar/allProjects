# -*- coding: utf-8 -*-
"""feedback generation model successful.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E3H-r6MsslEmz7iBjstmvjiwW3HJzNDK
"""

!pip install language-tool-python
!pip install transformers sentencepiece sacremoses
from transformers import *
import nltk
import language_tool_python
nltk.download('punkt')
nltk.download('stopwords')
tool = language_tool_python.LanguageTool('en-US')
from sklearn.metrics.pairwise import cosine_similarity
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize, sent_tokenize
import language_tool_python
from sklearn.feature_extraction.text import TfidfVectorizer
import re
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer


model = PegasusForConditionalGeneration.from_pretrained("tuner007/pegasus_paraphrase")
tokenizer = PegasusTokenizerFast.from_pretrained("tuner007/pegasus_paraphrase")


def keyword_match_score(student_answer, answer_key):
    # Tokenize student answer and answer key
    student_tokens = nltk.word_tokenize(student_answer.lower())
    answer_tokens = nltk.word_tokenize(answer_key.lower())

    # Generate keywords from answer key
    stopwords = nltk.corpus.stopwords.words('english')
    keywords = [token for token in answer_tokens if token not in stopwords]
    keywords = nltk.FreqDist(keywords).most_common(5)
    keywords = [keyword[0] for keyword in keywords]

    # Find matches between student answer and answer key
    matches = set(student_tokens) & set(answer_tokens)
    num_matches = len(matches)

    # Calculate score based on number of matches
    score = num_matches / len(answer_tokens) * 100

    # Generate feedback message based on score
    if score == 100:
        feedback_message = "Excellent job! Your answer is a perfect match."
    elif score >= 70:
        feedback_message = f"Good job! Your answer matches {int(score)}% of the keywords: {', '.join(matches)}."
    elif score >= 40:
        feedback_message = f"Your answer matches {int(score)}% of the keywords: {', '.join(matches)}. Try to include more of the following keywords: {', '.join(keywords)}."
    else:
        feedback_message = f"Your answer matches {int(score)}% of the keywords: {', '.join(matches)}. You should include more of the following keywords: {', '.join(keywords)}."

    return feedback_message, score

def check_grammar(student_answer):
    tool = language_tool_python.LanguageTool('en-US')
    matches = tool.check(student_answer)
    #feedback = []
    for match in matches:
        print(match)#feedback.append(match)
    #return feedback


def generate_paraphrased_sentences(model, tokenizer, sentence, num_return_sequences=4, num_beams=4):
  # tokenize the text to be form of a list of token IDs
  inputs = tokenizer([sentence], truncation=True, padding="longest", return_tensors="pt")
  # generate the paraphrased sentences
  outputs = model.generate(
    **inputs,
    num_beams=num_beams,
    num_return_sequences=num_return_sequences,
  )
  # decode the generated sentences using the tokenizer to get them back to text
  return tokenizer.batch_decode(outputs, skip_special_tokens=True)

def get_paraphrased_student_answer(student_answer):
    # Generate paraphrased versions of the student's answer
    paraphrased_sentences = generate_paraphrased_sentences(model, tokenizer, student_answer)
    return paraphrased_sentences

# Example usage
student_answer = "The process of seprating chaff from the crop is known as threshing.Threshing is also done by winnoning,the blow of air used seprate the chaff from crop"
answer_key = "Threshing is the separation of chaff from crop.Threshing is also done by winnoning, which uses a blow of air to separate the chaff from the crop."

feedback_message, score = keyword_match_score(student_answer, answer_key)
print(feedback_message)
print(f"Score: {score}%")
#gramatical_error_msg=check_grammar(student_answer)
check_grammar(student_answer)
paraphrased_sentences=get_paraphrased_student_answer(student_answer)
print(paraphrased_sentences)
#print(gramatical_error_msg)